name: build-musl

on:
  workflow_call:

jobs:
  build-arm:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - arm-unknown-linux-musleabi
          - arm-unknown-linux-musleabihf
          - aarch64-unknown-linux-musl
          - x86_64-unknown-linux-musl
    steps:
      # Checkout
      - name: Checkout
        uses: actions/checkout@v2

      - name: Fix cargo config
        run: sed -e "s/.*replace-with.*//g" -i .cargo/config.toml

      # Download web
      - name: Download web
        uses: actions/download-artifact@v4.1.7
        with:
          name: pisugar-web
          path: |
            electron/dist

      # Rust cache
      - uses: Swatinem/rust-cache@v1
      - uses: actions/cache@v3
        with:
          path: |
            /opt/arm-linux-musleabi-cross
            /opt/arm-linux-musleabihf-cross
            /opt/aarch64-linux-musl-cross
            /opt/x86_64-linux-musl-cross
          key: musl-cc-cache

      # Musl gcc
      - name: Download musl gcc
        env:
          target: ${{ matrix.target }}
        run: |
          echo /opt/arm-linux-musleabi-cross/bin >> $GITHUB_PATH
          echo /opt/arm-linux-musleabihf-cross/bin >> $GITHUB_PATH
          echo /opt/aarch64-linux-musl-cross/bin >> $GITHUB_PATH
          echo /opt/x86_64-linux-musl-cross/bin >> $GITHUB_PATH

          arch=${target%%-*}
          runtime=${target##*-linux-}
          prefix=$arch-linux-$runtime

          TARGET=$(echo $target | tr '[a-z\-]' '[A-Z_]')
          echo "prefix=$prefix" >> $GITHUB_ENV
          echo "target=$target" >> $GITHUB_ENV
          echo "CARGO_TARGET_${TARGET}_LINKER=${prefix}-gcc" >> $GITHUB_ENV

      # Rust toolchain
      - name: Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}

      # Build
      - name: Rust build
        run: |
          mkdir -p target
          find target -name '*.deb' | xargs rm -rf
          find target -name '*.rpm' | xargs rm -rf
          sudo apt update && sudo apt install -y rpm
          cargo install cargo-deb
          cargo install cargo-rpm
          cargo build --target ${target} --release
          for app in server poweroff programmer; do
            ${prefix}-strip -s target/${target}/release/pisugar-${app}
            cargo deb --no-build --no-strip --target $target -p pisugar-${app}
            (cd pisugar-${app} && cargo rpm build --target ${target})
          done

      # Upload artifact
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        env:
          target: ${{ matrix.target }}
        with:
          name: musl-${{ matrix.target }}
          path: |
            target/**/*.deb
            target/**/*.rpm
            target/**/pisugar-server
            target/**/pisugar-poweroff
            target/**/pisugar-programmer
          if-no-files-found: warn
